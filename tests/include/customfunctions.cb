// ****************************************************************************
// *                                 ########                                 *
// *                       CBENCHANTED CUSTOM FUNCTIONS                       *
// *                                    --                                    *
// *                 Superpowers for your cbEnchanted programs                *
// *                                 ########                                 *
// ****************************************************************************

// ----------------------------------------------------------------------------
// This constant defines the group for cbEnchanted core custom functions.
// More groups will be added to deal with different kinds of custom functions.
// Plans are made for custom groups for linked libraries that use the internals
// of cbEnchanted, thus gaining a big performance boost and the ability to do
// things that would otherwise be difficult or almost impossible to do with CB.
// ----------------------------------------------------------------------------
Const CBE_CUSTOM_FUNCTION_GROUP = 1

// ----------------------------------------------------------------------------
// cbeTriangle()
// ---
// Draws a triangle, given coordinates are the end points of each corner.
// The last parameter determines whether the triangle is filled or not.
// ----------------------------------------------------------------------------
Function cbeTriangle(x1 As Float, y1 As Float, x2 As Float, y2 As Float, x3 As Float, y3 As Float, fill = 1)
    group = CBE_CUSTOM_FUNCTION_GROUP
    funcId = 1
EndFunction

// ----------------------------------------------------------------------------
// cbeColor()
// ---
// Sets the current drawing color with an rgba value.
// ----------------------------------------------------------------------------
Function cbeColor(r, g, b, a)
    group = CBE_CUSTOM_FUNCTION_GROUP
    funcId = 2
EndFunction

// ----------------------------------------------------------------------------
// cbeClsColor()
// ---
// Sets the current Cls color with an rgba value.
// ----------------------------------------------------------------------------
Function cbeClsColor(r, g, b, a)
    group = CBE_CUSTOM_FUNCTION_GROUP
    funcId = 3
EndFunction

// ----------------------------------------------------------------------------
// cbeSetBlendMode()
// ---
// Sets the way colors are blended together when graphics with alpha are
// drawn over each other. If you don't want to modify alpha blending, set the
// second parameter to 0.
// ---
// Use the constants below with this function.
// ----------------------------------------------------------------------------
Const CBE_BLEND_RESET = 0
Const CBE_BLEND_ADDITIVE = 1
Const CBE_BLEND_OVERWRITE = 2
Function cbeSetBlendMode(blendType, setAlphaToo = 1)
    group = CBE_CUSTOM_FUNCTION_GROUP
    funcId = 4
EndFunction

// ----------------------------------------------------------------------------
// cbeSetBlendModeAdvanced()
// ---
// Sets the way colors are blended together when graphics with alpha are
// drawn over each other. This function is an advanced version of
// cbeSetBlendMode(). For information regarding how it is used, look it up at
// http://liballeg.org/a5docs/5.0.6/graphics.html#al_set_separate_blender
// ---
// Please use the constants below with this function. You can supply only
// the first three parameters and cbEnchanted will apply that blending to alpha
// channel, too.
// ----------------------------------------------------------------------------
Const CBE_BLEND_ADD = 1
Const CBE_BLEND_DEST_MINUS_SRC = 2
Const CBE_BLEND_SRC_MINUS_DEST = 3
Const CBE_BLEND_ZERO = 1
Const CBE_BLEND_ONE = 2
Const CBE_BLEND_ALPHA = 3
Const CBE_BLEND_INVERSE_ALPHA = 4

Function cbeSetBlendModeAdvanced(op, src, dst, alphaOp = 0, alphaSrc = 0, alphaDst = 0)
    group = CBE_CUSTOM_FUNCTION_GROUP
    funcId = 5
EndFunction

// ----------------------------------------------------------------------------
// cbeDrawTintedImage()
// ---
// Draws a part of an image, tinted with the current color, rotated and scaled.
// Tinting means that all the colors of the image will be multiplied by the
// current drawing color. For example, if you want to emphasize red color on
// your image, you could do cbeColor(255, 128, 128, 255) first and then draw
// your image using this function. For more information, see
// http://liballeg.org/a5docs/5.0.6/graphics.html#al_draw_tinted_bitmap
// ---
// Parameters:
//  * img ................. Image to draw
//  * centerX, centerY .... Coordinates to draw to. Image region is scaled and
//                          rotated around this point.
//  * angle ............... Rotation angle in degrees
//  * scaleX, scaleY ...... How much is the image region scaled when drawn.
//                          1 means no scaling.
//  * sX, sY .............. Top left coordinates of the image region to draw
//  * sW, sH .............. Width and height of the image region to draw.
//                          NOTE: If these are both 0, no cropping will be done
//                          and the whole image will be drawn.
// ----------------------------------------------------------------------------
Function cbeDrawTintedImage(img, centerX#, centerY#, angle# = 0.0, scaleX# = 1.0, scaleY# = 1.0, sX# = 0.0, sY# = 0.0, sW# = 0.0, sH# = 0.0)
    group = CBE_CUSTOM_FUNCTION_GROUP
    funcId = 6
EndFunction

// ----------------------------------------------------------------------------
// cbeDrawImage()
// ---
// Draws a part of an image, rotated and scaled.
// Parameters:
//  * img ................. Image to draw
//  * centerX, centerY .... Coordinates to draw to. Image region is scaled and
//                          rotated around this point.
//  * angle ............... Rotation angle in degrees
//  * scaleX, scaleY ...... How much is the image region scaled when drawn.
//                          1 means no scaling.
//  * sX, sY .............. Top left coordinates of the image region to draw
//  * sW, sH .............. Width and height of the image region to draw.
//                          NOTE: If these are both 0, no cropping will be done
//                          and the whole image will be drawn.
// ----------------------------------------------------------------------------
Function cbeDrawImage(img, centerX#, centerY#, angle# = 0.0, scaleX# = 1.0, scaleY# = 1.0, sX# = 0.0, sY# = 0.0, sW# = 0.0, sH# = 0.0)
    group = CBE_CUSTOM_FUNCTION_GROUP
    funcId = 29
EndFunction


// ============================================================================
// BINARY OPERATIONS
// ---
// These operations work on integers and are the equivelants of ~, &, | and ^
// operators in C++. These functions are:
//  * cbeBNot()  =>  ~
//  * cbeBAnd()  =>  &
//  * cbeBOr()   =>  |
//  * cbeBXor()  =>  ^
// ============================================================================

Function cbeBNot(i)
    group = CBE_CUSTOM_FUNCTION_GROUP
    funcId = 7
EndFunction

Function cbeBAnd(a, b)
    group = CBE_CUSTOM_FUNCTION_GROUP
    funcId = 8
EndFunction

Function cbeBOr(a, b)
    group = CBE_CUSTOM_FUNCTION_GROUP
    funcId = 9
EndFunction

Function cbeBXor(a, b)
    group = CBE_CUSTOM_FUNCTION_GROUP
    funcId = 10
EndFunction


// ----------------------------------------------------------------------------
// cbeReadLineUTF8()
// ---
// Reads an UTF-8 encoded line and converts all possible characters to
// Windows-1252 encoding. This function needs a file handle received from a
// successful OpenToRead() or OpenToEdit() function call.
// ----------------------------------------------------------------------------
Function cbeReadLineUTF8$(fileHandle)
    group = CBE_CUSTOM_FUNCTION_GROUP
    funcId = 11
EndFunction

// ----------------------------------------------------------------------------
// cbeShowConsole()
// ---
// Toggles console visibility. Only applies to Windows.
// ----------------------------------------------------------------------------
Function cbeShowConsole(visibleOrNot)
    group = CBE_CUSTOM_FUNCTION_GROUP
    funcId = 12
EndFunction

// ----------------------------------------------------------------------------
// cbeSetSystemCursor()
// ---
// Sets system cursor. Returns 1 on success, 0 otherwise. Please use the
// constants defined below as the parameter. For more info, consult
// http://liballeg.org/a5docs/5.0.6/mouse.html#al_set_system_mouse_cursor
// ----------------------------------------------------------------------------
Const CBE_SYSTEM_CURSOR_DEFAULT = 1
Const CBE_SYSTEM_CURSOR_ARROW = 2
Const CBE_SYSTEM_CURSOR_BUSY = 3
Const CBE_SYSTEM_CURSOR_QUESTION = 4
Const CBE_SYSTEM_CURSOR_EDIT = 5
Const CBE_SYSTEM_CURSOR_MOVE = 6
Const CBE_SYSTEM_CURSOR_RESIZE_N = 7
Const CBE_SYSTEM_CURSOR_RESIZE_W = 8
Const CBE_SYSTEM_CURSOR_RESIZE_S = 9
Const CBE_SYSTEM_CURSOR_RESIZE_E = 10
Const CBE_SYSTEM_CURSOR_RESIZE_NW = 11
Const CBE_SYSTEM_CURSOR_RESIZE_SW = 12
Const CBE_SYSTEM_CURSOR_RESIZE_SE = 13
Const CBE_SYSTEM_CURSOR_RESIZE_NE = 14
Const CBE_SYSTEM_CURSOR_PROGRESS = 15
Const CBE_SYSTEM_CURSOR_PRECISION = 16
Const CBE_SYSTEM_CURSOR_LINK = 17
Const CBE_SYSTEM_CURSOR_ALT_SELECT = 18
Const CBE_SYSTEM_CURSOR_UNAVAILABLE = 19

Function cbeSetSystemCursor(mouseCursorConstant)
    group = CBE_CUSTOM_FUNCTION_GROUP
    funcId = 13
EndFunction

// ============================================================================
// TRANSLATION FUNCTIONS - Untested, use at your own risk.
// ---
// These transformations are used for all future drawing operations that
// are drawn originally at screen coordinates. The functions are:
//  * cbeTransfromBuild() ...... scale, rotation and translation transformation
//  * cbeTransformRotate() ..... rotation transformation
//  * cbeTransformScale() ...... scale transformation
//  * cbeTransformTranslate() .. translation trasformation
//  * cbeTransformReset() ...... resets the identity (default) transformation
// ============================================================================

Function cbeTransformBuild(transX#, transY#, scaleX#, scaleY#, angle#)
    group = CBE_CUSTOM_FUNCTION_GROUP
    funcId = 14
EndFunction

Function cbeTransformRotate(angle#)
    group = CBE_CUSTOM_FUNCTION_GROUP
    funcId = 15
EndFunction

Function cbeTransformScale(scaleX#, scaleY#)
    group = CBE_CUSTOM_FUNCTION_GROUP
    funcId = 16
EndFunction

Function cbeTransformTranslate(transX#, transY#)
    group = CBE_CUSTOM_FUNCTION_GROUP
    funcId = 17
EndFunction

Function cbeTransformReset()
    group = CBE_CUSTOM_FUNCTION_GROUP
    funcId = 18
EndFunction


// ----------------------------------------------------------------------------
// cbeCameraAngle()
// ---
// The whole world can be rotated by giving an extra parameter to TurnCamera or
// RotateCamera. This function returns the cameras real angle.
// ----------------------------------------------------------------------------
Function cbeCameraAngle#()
    group = CBE_CUSTOM_FUNCTION_GROUP
    funcId = 19
EndFunction

// ----------------------------------------------------------------------------
// cbeCameraZoom()
// ---
// The whole world can be zoomed by giving MoveCamera or TranslateCamera a
// third parameter. This function returns the zoom factor of the camera.
// ----------------------------------------------------------------------------
Function cbeCameraZoom#()
    group = CBE_CUSTOM_FUNCTION_GROUP
    funcId = 20
EndFunction

// ----------------------------------------------------------------------------
// cbeSetLineWith()
// ---
// Use this function to set the line width of Line, Box, Circle, Ellipse and
// cbeTriangle().
// ----------------------------------------------------------------------------
Function cbeSetLineWidth(width As Float = 1.0)
    group = CBE_CUSTOM_FUNCTION_GROUP
    funcId = 21
EndFunction

// ----------------------------------------------------------------------------
// cbeFileDialog()
// ---
// Shows the native file dialog window. You can use this function to create a
// file chooser that is cross-platform and uses the internals of users
// operating system.
// ---
// Use the constants below with this function. You can combine those constants
// with the custom binary functions. For more info, see
// http://liballeg.org/a5docs/5.0.6/native_dialog.html#al_create_native_file_dialog
// ----------------------------------------------------------------------------
Const CBE_FILECHOOSER_FILE_MUST_EXIST = 1
Const CBE_FILECHOOSER_SAVE = 2
Const CBE_FILECHOOSER_FOLDER = 4
Const CBE_FILECHOOSER_PICTURES = 8
Const CBE_FILECHOOSER_SHOW_HIDDEN = 16
Const CBE_FILECHOOSER_MULTIPLE = 32

Function cbeFileDialog(path As String, title As String, patterns As String, mode As Integer)
    group = CBE_CUSTOM_FUNCTION_GROUP
    funcId = 22
EndFunction

// ============================================================================
// COORDINATE SYSTEM CONVERSIONS
// ---
// Convert screen coordinates to real world ooordinates. The return values take
// the world rotation and zooming into account, thus returning accurate
// results. These functions are also quite fast. You must always give the
// first four functions accurate x and y coordinates in order for the inner
// math to work correctly.
// ---
// The functions are:
//  * cbeSToWX() ....... screen X -> world X
//  * cbeSToWY() ....... screen Y -> world Y
//  * cbeWToSX() ....... world X -> screen X
//  * cbeWToSY() ....... world Y -> screen Y
//  * cbeObjectSX() .... Object X -> screen X
//  * cbeObjectSY() .... Object Y -> screen Y
// ============================================================================

Function cbeSToWX#(x As Float, y As Float)
    group = CBE_CUSTOM_FUNCTION_GROUP
    funcId = 23
EndFunction

Function cbeSToWY#(x As Float, y As Float)
    group = CBE_CUSTOM_FUNCTION_GROUP
    funcId = 24
EndFunction

Function cbeWToSX#(x As Float, y As Float)
    group = CBE_CUSTOM_FUNCTION_GROUP
    funcId = 25
EndFunction

Function cbeWToSY#(x As Float, y As Float)
    group = CBE_CUSTOM_FUNCTION_GROUP
    funcId = 26
EndFunction

Function cbeObjectSX#(obj)
    group = CBE_CUSTOM_FUNCTION_GROUP
    funcId = 27
EndFunction

Function cbeObjectSY#(obj)
    group = CBE_CUSTOM_FUNCTION_GROUP
    funcId = 28
EndFunction

// ----------------------------------------------------------------------------
// cbeLoadLibrary(path$, resolvesymbols = 1)
// ---
// Loads a dll-library from given path and links functions with cb-side
// header functions if the second parameter is not 0.
// Using custom functions that haven't been linked will crash the program.
// ----------------------------------------------------------------------------
Function cbeLoadLibrary(path$, resolvesymbols = 1)
    group = CBE_CUSTOM_FUNCTION_GROUP
    funcId = 31
EndFunction

// ----------------------------------------------------------------------------
// cbeLinkCustomFunctions()
// ---
// Links custom functions loaded from dll with cb-side header functions.
// Use this if you don't link functions in cbeLoadLibrary. 
// ----------------------------------------------------------------------------
Function cbeLinkCustomFunctions()
    group = CBE_CUSTOM_FUNCTION_GROUP
    funcId = 30
EndFunction
